}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
}
A = sovlve(Hs)
A = solve(Hs)
A[,1]
sum(A[,1]>0.05)
sum(abs(A[,1])>0.05)
sum(abs(A[,1])>0.5)
library("glmnet")
library("survival")
library("mvtnorm")
library("glasso")
alpha1= 1
alpha2= 1
eta = 1
PVAL = c()
d = 100
n = 5000
s = 2
mean = rep(0,d)
Sgm  = diag(d)
rep  = 1000
rho  = 0.25
pval = c()
test   = c()
coi    = 30
aa     = c()
for (i in 1:d)
{
for (j in 1:d)
{
Sgm[i,j] = rho^(abs(i-j))
}
}
set.seed(1234)
x    = rmvnorm(n=n,mean=mean,sigma=Sgm)
bt   = c(rep(1,s),rep(0,d-s))
#time1 = c() #survival time
#time2 = c() #censoring time
time   = c() #min(time1,time2)
status = rep(0,n)
for (i in 1:n)
{
hzd  = exp((x[i,])%*%bt)
tmp1 = rexp(1,rate = hzd)
tmp2 = (runif(1)*2+1) * rexp(1,rate=hzd)
tmp  = min(tmp1,tmp2)
time = c(time,tmp)
if (tmp1<tmp2)
{
status[i] = 1
}
}
###d 100 0.5 2 d150 0.2 1.5 d500
lambdas = seq(from = 0.1,to=1.5,by = 0.03)
lambdas = lambdas*log(d)/n
###rho  0.25 d = 100 n = 100 150
#fit <- glmnet(x, Surv(time, status),lambda = log(d)/n/(d/(150)),alpha = 1,family = "cox", maxit = 100000,standardize=FALSE)
#len = length(fit$lambda)
#beta = fit$beta[,len]
stime = sort(time)
otime = order(time)
Vs  = matrix(rep(0,d*d),nrow = d)
Hs  = Vs
ind = 0
la  = rep(0,n)
laa = rep(0,n)
lb  = matrix(rep(0,(d-1)*n),nrow = n)
i   = 1
while( i<=n)
{
if (status[otime[i]]==1)
{
ind = which(time >= stime[i])
S0  = 0
S1  = rep(0,d)
S2  = matrix(rep(0,d*d),nrow = d)
if (length(ind)>0)
{
for (j in 1:length(ind))
{
tmp = exp(x[ind[j],]%*%bt)
S0  = S0 + tmp
S1  = S1 + tmp %*%t(x[ind[j],])
tmp = apply(tmp,1,as.numeric)
S2  = S2 + tmp*x[ind[j],]%*%t(x[ind[j],])
}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
print(i)
}
A = solve(Hs)
sum(abs(A[,1])>0.5)
sum(abs(A[,1])>0.05)
sum(abs(A[,1])>0.01)
dim(A)
sum(abs(A[,2])>0.05)
sum(abs(A[,3])>0.05)
sum(abs(A[,4])>0.05)
sum(abs(A[,5])>0.05)
sum(abs(A[,6])>0.05)
sum(abs(A[,7])>0.05)
sum(abs(A[,50])>0.05)
A[,50]
sum(abs(A[,50])>0.1)
sum(abs(A[,50])>0.01)
library("glmnet")
library("survival")
library("mvtnorm")
library("glasso")
alpha1= 1
alpha2= 1
eta = 1
PVAL = c()
d = 100
n = 5000
s = 3
mean = rep(0,d)
Sgm  = diag(d)
rep  = 1000
rho  = 0.75
pval = c()
test   = c()
coi    = 30
aa     = c()
for (i in 1:d)
{
for (j in 1:d)
{
Sgm[i,j] = rho^(abs(i-j))
}
}
set.seed(1234)
x    = rmvnorm(n=n,mean=mean,sigma=Sgm)
bt   = c(rep(1,s),rep(0,d-s))
#time1 = c() #survival time
#time2 = c() #censoring time
time   = c() #min(time1,time2)
status = rep(0,n)
for (i in 1:n)
{
hzd  = exp((x[i,])%*%bt)
tmp1 = rexp(1,rate = hzd)
tmp2 = (runif(1)*2+1) * rexp(1,rate=hzd)
tmp  = min(tmp1,tmp2)
time = c(time,tmp)
if (tmp1<tmp2)
{
status[i] = 1
}
}
###d 100 0.5 2 d150 0.2 1.5 d500
lambdas = seq(from = 0.1,to=1.5,by = 0.03)
lambdas = lambdas*log(d)/n
###rho  0.25 d = 100 n = 100 150
#fit <- glmnet(x, Surv(time, status),lambda = log(d)/n/(d/(150)),alpha = 1,family = "cox", maxit = 100000,standardize=FALSE)
#len = length(fit$lambda)
#beta = fit$beta[,len]
stime = sort(time)
otime = order(time)
Vs  = matrix(rep(0,d*d),nrow = d)
Hs  = Vs
ind = 0
la  = rep(0,n)
laa = rep(0,n)
lb  = matrix(rep(0,(d-1)*n),nrow = n)
i   = 1
while( i<=n)
{
if (status[otime[i]]==1)
{
ind = which(time >= stime[i])
S0  = 0
S1  = rep(0,d)
S2  = matrix(rep(0,d*d),nrow = d)
if (length(ind)>0)
{
for (j in 1:length(ind))
{
tmp = exp(x[ind[j],]%*%bt)
S0  = S0 + tmp
S1  = S1 + tmp %*%t(x[ind[j],])
tmp = apply(tmp,1,as.numeric)
S2  = S2 + tmp*x[ind[j],]%*%t(x[ind[j],])
}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
print(i)
}
library("glmnet")
library("survival")
library("mvtnorm")
library("glasso")
alpha1= 1
alpha2= 1
eta = 1
PVAL = c()
d = 100
n = 5000
s = 3
mean = rep(0,d)
Sgm  = diag(d)
rep  = 1000
rho  = 0.75
pval = c()
test   = c()
coi    = 30
aa     = c()
for (i in 1:d)
{
for (j in 1:d)
{
Sgm[i,j] = rho^(abs(i-j))
}
}
set.seed(1234)
x    = rmvnorm(n=n,mean=mean,sigma=Sgm)
bt   = c(rep(1,s),rep(0,d-s))
#time1 = c() #survival time
#time2 = c() #censoring time
time   = c() #min(time1,time2)
status = rep(0,n)
for (i in 1:n)
{
hzd  = exp((x[i,])%*%bt)
tmp1 = rexp(1,rate = hzd)
tmp2 = (runif(1)*2+1) * rexp(1,rate=hzd)
tmp  = min(tmp1,tmp2)
time = c(time,tmp)
if (tmp1<tmp2)
{
status[i] = 1
}
}
###d 100 0.5 2 d150 0.2 1.5 d500
lambdas = seq(from = 0.1,to=1.5,by = 0.03)
lambdas = lambdas*log(d)/n
###rho  0.25 d = 100 n = 100 150
#fit <- glmnet(x, Surv(time, status),lambda = log(d)/n/(d/(150)),alpha = 1,family = "cox", maxit = 100000,standardize=FALSE)
#len = length(fit$lambda)
#beta = fit$beta[,len]
stime = sort(time)
otime = order(time)
Vs  = matrix(rep(0,d*d),nrow = d)
Hs  = Vs
ind = 0
la  = rep(0,n)
laa = rep(0,n)
lb  = matrix(rep(0,(d-1)*n),nrow = n)
i   = 1
while( i<=n)
{
if (status[otime[i]]==1)
{
ind = which(time >= stime[i])
S0  = 0
S1  = rep(0,d)
S2  = matrix(rep(0,d*d),nrow = d)
if (length(ind)>0)
{
for (j in 1:length(ind))
{
tmp = exp(x[ind[j],]%*%bt)
S0  = S0 + tmp
S1  = S1 + tmp %*%t(x[ind[j],])
tmp = apply(tmp,1,as.numeric)
S2  = S2 + tmp*x[ind[j],]%*%t(x[ind[j],])
}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
print(i)
}
A = solve(Hs)
sum(abs(A[,50]/A[50,50])>0.01)
sum(abs(A[,50]/A[50,50])>0.05)
A[50,50]
sum(abs(A[,1]/A[1,1])>0.05)
cst = Hs[coi,coi] - Hs[coi,c(c(1:coi-1),c(coi+1:d))]%*%(solve(Hs[c(c(1:coi-1),c(coi+1:d)),c(c(1:coi-1),c(coi+1:d))]))%*%Hs[c(c(1:coi-1),c(coi+1:d)),coi]
library("glmnet")
library("survival")
library("mvtnorm")
library("glasso")
alpha1= 1
alpha2= 1
eta = 1
PVAL = c()
d = 100
n = 5000
s = 3
mean = rep(0,d)
Sgm  = diag(d)
rep  = 1000
rho  = 0.75
pval = c()
test   = c()
coi    = 30
aa     = c()
for (i in 1:d)
{
for (j in 1:d)
{
Sgm[i,j] = rho^(abs(i-j))
}
}
set.seed(1234)
x    = rmvnorm(n=n,mean=mean,sigma=Sgm)
bt   = c(rep(1,s),rep(0,d-s))
#time1 = c() #survival time
#time2 = c() #censoring time
time   = c() #min(time1,time2)
status = rep(0,n)
for (i in 1:n)
{
hzd  = exp((x[i,])%*%bt)
tmp1 = rexp(1,rate = hzd)
tmp2 = (runif(1)*2+1) * rexp(1,rate=hzd)
tmp  = min(tmp1,tmp2)
time = c(time,tmp)
if (tmp1<tmp2)
{
status[i] = 1
}
}
###d 100 0.5 2 d150 0.2 1.5 d500
lambdas = seq(from = 0.1,to=1.5,by = 0.03)
lambdas = lambdas*log(d)/n
###rho  0.25 d = 100 n = 100 150
#fit <- glmnet(x, Surv(time, status),lambda = log(d)/n/(d/(150)),alpha = 1,family = "cox", maxit = 100000,standardize=FALSE)
#len = length(fit$lambda)
#beta = fit$beta[,len]
stime = sort(time)
otime = order(time)
Vs  = matrix(rep(0,d*d),nrow = d)
Hs  = Vs
ind = 0
la  = rep(0,n)
laa = rep(0,n)
lb  = matrix(rep(0,(d-1)*n),nrow = n)
i   = 1
while( i<=n)
{
if (status[otime[i]]==1)
{
ind = which(time >= stime[i])
S0  = 0
S1  = rep(0,d)
S2  = matrix(rep(0,d*d),nrow = d)
if (length(ind)>0)
{
for (j in 1:length(ind))
{
tmp = exp(x[ind[j],]%*%bt)
S0  = S0 + tmp
S1  = S1 + tmp %*%t(x[ind[j],])
tmp = apply(tmp,1,as.numeric)
S2  = S2 + tmp*x[ind[j],]%*%t(x[ind[j],])
}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
print(i)
}
library("glmnet")
library("survival")
library("mvtnorm")
library("glasso")
alpha1= 1
alpha2= 1
eta = 1
PVAL = c()
d = 100
n = 5000
s = 3
mean = rep(0,d)
Sgm  = diag(d)
rep  = 1000
rho  = 0.75
pval = c()
test   = c()
coi    = 30
aa     = c()
for (i in 1:d)
{
for (j in 1:d)
{
Sgm[i,j] = rho^(abs(i-j))
}
}
set.seed(1234)
x    = rmvnorm(n=n,mean=mean,sigma=Sgm)
bt   = c(rep(1,s),rep(0,d-s))
#time1 = c() #survival time
#time2 = c() #censoring time
time   = c() #min(time1,time2)
status = rep(0,n)
for (i in 1:n)
{
hzd  = exp((x[i,])%*%bt)
tmp1 = rexp(1,rate = hzd)
tmp2 = (runif(1)*2+1) * rexp(1,rate=hzd)
tmp  = min(tmp1,tmp2)
time = c(time,tmp)
if (tmp1<tmp2)
{
status[i] = 1
}
}
###d 100 0.5 2 d150 0.2 1.5 d500
lambdas = seq(from = 0.1,to=1.5,by = 0.03)
lambdas = lambdas*log(d)/n
###rho  0.25 d = 100 n = 100 150
#fit <- glmnet(x, Surv(time, status),lambda = log(d)/n/(d/(150)),alpha = 1,family = "cox", maxit = 100000,standardize=FALSE)
#len = length(fit$lambda)
#beta = fit$beta[,len]
stime = sort(time)
otime = order(time)
Vs  = matrix(rep(0,d*d),nrow = d)
Hs  = Vs
ind = 0
la  = rep(0,n)
laa = rep(0,n)
lb  = matrix(rep(0,(d-1)*n),nrow = n)
i   = 1
while( i<=n)
{
if (status[otime[i]]==1)
{
ind = which(time >= stime[i])
S0  = 0
S1  = rep(0,d)
S2  = matrix(rep(0,d*d),nrow = d)
if (length(ind)>0)
{
for (j in 1:length(ind))
{
tmp = exp(x[ind[j],]%*%bt)
S0  = S0 + tmp
S1  = S1 + tmp %*%t(x[ind[j],])
tmp = apply(tmp,1,as.numeric)
S2  = S2 + tmp*x[ind[j],]%*%t(x[ind[j],])
}
}
S0 = apply(S0,1,as.numeric)
la[i]  = (x[otime[i],coi] - S1[coi]/S0)
lb[i,] = (x[otime[i],c(1:(coi-1), (coi+1):d)] - S1[c(1:(coi-1), (coi+1):d)]/S0)
V   = S0*S2 - t(S1)%*%(S1)
Hs  = Hs + V/(n*S0^2)
}
i = i + 1
print(i)
}
A = inv(Hs)
cst = Hs[coi,coi] - Hs[coi,c(c(1:coi-1),c(coi+1:d))]%*%(solve(Hs[c(c(1:(coi-1)),c((coi+1):d)),c(c(1:coi-1),c(coi+1:d))]))%*%Hs[c(c(1:coi-1),c(coi+1:d)),coi]
d
rho
A = solve(Hs)
sum(abs(A[coi,]/A[coi,coi])>0.05)
s
rho
A = solve(Hs)
sum(abs(A[coi,]/A[coi,coi])>0.5)
A = solve(Hs)
sum(abs(A[coi,]/A[coi,coi])>0.1)
d
A = solve(Hs)
sum(abs(A[coi,]/A[coi,coi])>0.03)
A = solve(Hs)
sum(abs(A[coi,]/A[coi,coi])>0.04)
d
library("Rsymphony")
?Rsymphony_solve_LP
install.packages("library(RcppArmadillo)")
install.packages("RcppArmadillo")
library(RcppArmadillo)
setwd("/Users/ethanfangxy/Dropbox/Ethan_Lynn_Qiang/Code_fittingGMM")
library(MASS)
library(MCMCpack)
library(mvtnorm)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("express.cc", rebuild = TRUE, verbose = FALSE)
